// <auto-generated />
using System;
using EducationProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationProject.Migrations
{
    [DbContext(typeof(EducationprojectContext))]
    partial class EducationprojectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EducationProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Subscribe")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EducationProject.Models.AssignmentsDone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MatrialId")
                        .HasColumnType("int");

                    b.Property<string>("chapter")
                        .HasColumnType("longtext");

                    b.Property<string>("imgUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("lesson")
                        .HasColumnType("longtext");

                    b.Property<int?>("levelId")
                        .HasColumnType("int");

                    b.Property<string>("semester")
                        .HasColumnType("longtext");

                    b.Property<int?>("teacherId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_TbAssignments");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("MatrialId");

                    b.HasIndex("levelId");

                    b.HasIndex("teacherId");

                    b.HasIndex("userId");

                    b.ToTable("AssignmentsDone");
                });

            modelBuilder.Entity("EducationProject.Models.TbAssignmentLink", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AssignmentTitle")
                        .HasColumnType("longtext");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MatrialId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("MatrialId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("VideoId");

                    b.ToTable("TbAssignmentLinks");
                });

            modelBuilder.Entity("EducationProject.Models.TbCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("StudentID");

                    b.HasKey("CodeId");

                    b.HasIndex(new[] { "LevelId" }, "IX_TbCodes_LevelId");

                    b.HasIndex(new[] { "StudentId" }, "IX_TbCodes_StudentID");

                    b.ToTable("TbCodes");
                });

            modelBuilder.Entity("EducationProject.Models.TbLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LevelId");

                    b.ToTable("TbLevel");
                });

            modelBuilder.Entity("EducationProject.Models.TbMatrial", b =>
                {
                    b.Property<int>("MatrialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MatrialID");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("MatrialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MatrialId");

                    b.HasIndex(new[] { "LevelId" }, "IX_TbMatrial_LevelId");

                    b.ToTable("TbMatrial");
                });

            modelBuilder.Entity("EducationProject.Models.TbStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("StudentFullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("subscribe")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.HasKey("StudentId");

                    b.HasIndex(new[] { "LevelId" }, "IX_TbStudent_LevelId");

                    b.ToTable("TbStudent");
                });

            modelBuilder.Entity("EducationProject.Models.TbTeacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MatrialId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TeacherId");

                    b.HasIndex("MatrialId");

                    b.ToTable("TbTeacher");
                });

            modelBuilder.Entity("EducationProject.Models.TbVideo", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.Property<string>("Chapter")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Chapter");

                    b.Property<string>("Lesson")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Lesson");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MatrialId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("URL");

                    b.Property<int>("semester")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.HasIndex("MatrialId");

                    b.HasIndex(new[] { "LevelId" }, "IX_TbVideos_LevelId");

                    b.HasIndex(new[] { "TeacherId" }, "IX_TbVideos_TeacherId");

                    b.ToTable("TbVideos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentMatrial", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<int>("MatrialId")
                        .HasColumnType("int")
                        .HasColumnName("MatrialID");

                    b.HasKey("StudentId", "MatrialId");

                    b.HasIndex(new[] { "MatrialId" }, "IX_StudentMatrial_MatrialID");

                    b.ToTable("StudentMatrial", (string)null);
                });

            modelBuilder.Entity("TbMatrialTbStudent", b =>
                {
                    b.Property<int>("MatrialId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MatrialId", "StudentId");

                    b.ToTable("TbMatrialTbStudent");
                });

            modelBuilder.Entity("EducationProject.Models.ApplicationUser", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("AppUser")
                        .HasForeignKey("LevelId");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("EducationProject.Models.AssignmentsDone", b =>
                {
                    b.HasOne("EducationProject.Models.TbAssignmentLink", "Assignment")
                        .WithMany("TbAssignmentDones")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_TbAssignmentDones_TbAssignmentLinks");

                    b.HasOne("EducationProject.Models.TbMatrial", "Matrial")
                        .WithMany("TbAssignmentDones")
                        .HasForeignKey("MatrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbAssignment_TbMatrial");

                    b.HasOne("EducationProject.Models.TbLevel", "level")
                        .WithMany("TbAssignmentDones")
                        .HasForeignKey("levelId");

                    b.HasOne("EducationProject.Models.TbTeacher", "teacher")
                        .WithMany("TbAssignmentDones")
                        .HasForeignKey("teacherId");

                    b.HasOne("EducationProject.Models.ApplicationUser", "StudentUser")
                        .WithMany("AssignmentDones")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbAssignment_TbStudent");

                    b.Navigation("Assignment");

                    b.Navigation("Matrial");

                    b.Navigation("StudentUser");

                    b.Navigation("level");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("EducationProject.Models.TbAssignmentLink", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("TbAssignmentLinks")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_TbAssignmentLinks_TbLevel");

                    b.HasOne("EducationProject.Models.TbMatrial", "Matrial")
                        .WithMany("TbAssignmentLinks")
                        .HasForeignKey("MatrialId");

                    b.HasOne("EducationProject.Models.TbTeacher", "Teacher")
                        .WithMany("TbAssignmentLinks")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TbAssignmentLinks_TbTeacher");

                    b.HasOne("EducationProject.Models.TbVideo", "video")
                        .WithMany("AssignmentLinks")
                        .HasForeignKey("VideoId");

                    b.Navigation("Level");

                    b.Navigation("Matrial");

                    b.Navigation("Teacher");

                    b.Navigation("video");
                });

            modelBuilder.Entity("EducationProject.Models.TbCode", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("TbCodes")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_TbCodes_TbLevel");

                    b.HasOne("EducationProject.Models.TbStudent", "Student")
                        .WithMany("TbCodes")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_TbCodes_TbStudent");

                    b.Navigation("Level");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationProject.Models.TbMatrial", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("TbMatrials")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_TbMatrial_TbLevel");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("EducationProject.Models.TbStudent", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("TbStudents")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_TbStudent_TbLevel");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("EducationProject.Models.TbTeacher", b =>
                {
                    b.HasOne("EducationProject.Models.TbMatrial", "Matrial")
                        .WithMany("TbTeachers")
                        .HasForeignKey("MatrialId")
                        .HasConstraintName("FK_TbTeacher_TbMatrial");

                    b.Navigation("Matrial");
                });

            modelBuilder.Entity("EducationProject.Models.TbVideo", b =>
                {
                    b.HasOne("EducationProject.Models.TbLevel", "Level")
                        .WithMany("TbVideos")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbVideos_TbLevel");

                    b.HasOne("EducationProject.Models.TbMatrial", "Matrial")
                        .WithMany("TbVideos")
                        .HasForeignKey("MatrialId")
                        .HasConstraintName("FK_TbVideos_TbMatrial");

                    b.HasOne("EducationProject.Models.TbTeacher", "Teacher")
                        .WithMany("TbVideos")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Level");

                    b.Navigation("Matrial");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentMatrial", b =>
                {
                    b.HasOne("EducationProject.Models.TbMatrial", null)
                        .WithMany()
                        .HasForeignKey("MatrialId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentMatrial_TbMatrial");

                    b.HasOne("EducationProject.Models.TbStudent", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentMatrial_TbStudent");
                });

            modelBuilder.Entity("EducationProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("AssignmentDones");
                });

            modelBuilder.Entity("EducationProject.Models.TbAssignmentLink", b =>
                {
                    b.Navigation("TbAssignmentDones");
                });

            modelBuilder.Entity("EducationProject.Models.TbLevel", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("TbAssignmentDones");

                    b.Navigation("TbAssignmentLinks");

                    b.Navigation("TbCodes");

                    b.Navigation("TbMatrials");

                    b.Navigation("TbStudents");

                    b.Navigation("TbVideos");
                });

            modelBuilder.Entity("EducationProject.Models.TbMatrial", b =>
                {
                    b.Navigation("TbAssignmentDones");

                    b.Navigation("TbAssignmentLinks");

                    b.Navigation("TbTeachers");

                    b.Navigation("TbVideos");
                });

            modelBuilder.Entity("EducationProject.Models.TbStudent", b =>
                {
                    b.Navigation("TbCodes");
                });

            modelBuilder.Entity("EducationProject.Models.TbTeacher", b =>
                {
                    b.Navigation("TbAssignmentDones");

                    b.Navigation("TbAssignmentLinks");

                    b.Navigation("TbVideos");
                });

            modelBuilder.Entity("EducationProject.Models.TbVideo", b =>
                {
                    b.Navigation("AssignmentLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
